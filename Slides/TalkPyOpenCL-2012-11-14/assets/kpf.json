{"slideHeight":768,
"filename":"TalkPyOpenCL",
"navigatorEvents":[{"eventName":"Slide 1",
"eventIndex":0}
,{"eventName":"Slide 2",
"eventIndex":1}
,{"eventName":"Slide 3",
"eventIndex":2}
,{"eventName":"Slide 4",
"eventIndex":3}
,{"eventName":"Slide 5",
"eventIndex":4}
,{"eventName":"Slide 6",
"eventIndex":5}
,{"eventName":"Slide 7",
"eventIndex":6}
,{"eventName":"Slide 8",
"eventIndex":7}
,{"eventName":"Slide 9",
"eventIndex":8}
,{"eventName":"Slide 10",
"eventIndex":9}
,{"eventName":"Slide 11",
"eventIndex":10}
,{"eventName":"Slide 12",
"eventIndex":11}
,{"eventName":"Slide 13",
"eventIndex":12}
,{"eventName":"Slide 14",
"eventIndex":13}
,{"eventName":"Slide 15",
"eventIndex":14}
,{"eventName":"Slide 16",
"eventIndex":15}
,{"eventName":"Slide 17",
"eventIndex":16}
,{"eventName":"Slide 18",
"eventIndex":17}
,{"eventName":"Slide 19",
"eventIndex":18}
,{"eventName":"Slide 20",
"eventIndex":19}
,{"eventName":"Slide 21",
"eventIndex":20}
,{"eventName":"Slide 22",
"eventIndex":21}
,{"eventName":"Slide 23",
"eventIndex":22}
,{"eventName":"Slide 24",
"eventIndex":23}
,{"eventName":"Slide 25",
"eventIndex":24}
,{"eventName":"Slide 26",
"eventIndex":25}
,{"eventName":"Slide 27",
"eventIndex":26}
,{"eventName":"Slide 28",
"eventIndex":28}
]
,
"textures":{"thumbnail":{"url":"images-1/thumbnail.jpeg",
"width":458,
"height":344}
,
"s1.b":{"url":"images-1/s1.b.jpeg",
"width":1024,
"height":768}
,
"s6.b":{"url":"images-1/s6.b.jpeg",
"width":1024,
"height":768}
,
"s2.a":{"url":"images-1/s1.b.jpeg",
"width":1024,
"height":768}
,
"s11.b":{"url":"images-1/s11.b.jpeg",
"width":1024,
"height":768}
,
"s7.a":{"url":"images-1/s6.b.jpeg",
"width":1024,
"height":768}
,
"s14.b":{"url":"images-1/s14.b.jpeg",
"width":1024,
"height":768}
,
"s21.b":{"url":"images-1/s21.b.jpeg",
"width":1024,
"height":768}
,
"s17.b":{"url":"images-1/s17.b.jpeg",
"width":1024,
"height":768}
,
"s24.b":{"url":"images-1/s24.b.jpeg",
"width":1024,
"height":768}
,
"s27.b":{"url":"images-1/s27.b.jpeg",
"width":1024,
"height":768}
,
"s12.a":{"url":"images-1/s11.b.jpeg",
"width":1024,
"height":768}
,
"s15.a":{"url":"images-1/s14.b.jpeg",
"width":1024,
"height":768}
,
"s22.a":{"url":"images-1/s21.b.jpeg",
"width":1024,
"height":768}
,
"s18.a":{"url":"images-1/s17.b.jpeg",
"width":1024,
"height":768}
,
"s2.b":{"url":"images-1/s2.b.jpeg",
"width":1024,
"height":768}
,
"s25.a":{"url":"images-1/s24.b.jpeg",
"width":1024,
"height":768}
,
"s28.a":{"url":"images-1/s27.b.jpeg",
"width":1024,
"height":768}
,
"s7.b":{"url":"images-1/s7.b.jpeg",
"width":1024,
"height":768}
,
"s3.a":{"url":"images-1/s2.b.jpeg",
"width":1024,
"height":768}
,
"s8.a":{"url":"images-1/s7.b.jpeg",
"width":1024,
"height":768}
,
"s27.1.1.1.fixed":{"url":"images-1/s27.1.1.1.fixed.png",
"width":233,
"height":64}
,
"s3.b":{"url":"images-1/s3.b.jpeg",
"width":1024,
"height":768}
,
"s12.b":{"url":"images-1/s12.b.jpeg",
"width":1024,
"height":768}
,
"s8.b":{"url":"images-1/s8.b.jpeg",
"width":1024,
"height":768}
,
"s15.b":{"url":"images-1/s15.b.jpeg",
"width":1024,
"height":768}
,
"s22.b":{"url":"images-1/s22.b.jpeg",
"width":1024,
"height":768}
,
"s18.b":{"url":"images-1/s18.b.jpeg",
"width":1024,
"height":768}
,
"s25.b":{"url":"images-1/s25.b.jpeg",
"width":1024,
"height":768}
,
"movie.1":{"width":640,
"movieLooping":"none",
"movieUrl":"images-1/movie.1.m4v",
"url":"images-1/movie.1.jpeg",
"height":480}
,
"s4.a":{"url":"images-1/s3.b.jpeg",
"width":1024,
"height":768}
,
"s10.a":{"url":"images-1/s9.b.jpeg",
"width":1024,
"height":768}
,
"s28.b":{"url":"images-1/s28.b.png",
"width":1024,
"height":768}
,
"s9.a":{"url":"images-1/s8.b.jpeg",
"width":1024,
"height":768}
,
"s13.a":{"url":"images-1/s12.b.jpeg",
"width":1024,
"height":768}
,
"s16.a":{"url":"images-1/s15.b.jpeg",
"width":1024,
"height":768}
,
"s23.a":{"url":"images-1/s22.b.jpeg",
"width":1024,
"height":768}
,
"s19.a":{"url":"images-1/s18.b.jpeg",
"width":1024,
"height":768}
,
"s20.a":{"url":"images-1/s19.b.jpeg",
"width":1024,
"height":768}
,
"s26.a":{"url":"images-1/s25.b.jpeg",
"width":1024,
"height":768}
,
"s4.b":{"url":"images-1/s4.b.jpeg",
"width":1024,
"height":768}
,
"s9.b":{"url":"images-1/s9.b.jpeg",
"width":1024,
"height":768}
,
"s5.a":{"url":"images-1/s4.b.jpeg",
"width":1024,
"height":768}
,
"s10.b":{"url":"images-1/s10.b.jpeg",
"width":1024,
"height":768}
,
"s13.b":{"url":"images-1/s13.b.jpeg",
"width":1024,
"height":768}
,
"s20.b":{"url":"images-1/s20.b.jpeg",
"width":1024,
"height":768}
,
"s16.b":{"url":"images-1/s16.b.jpeg",
"width":1024,
"height":768}
,
"s23.b":{"url":"images-1/s23.b.jpeg",
"width":1024,
"height":768}
,
"s19.b":{"url":"images-1/s19.b.jpeg",
"width":1024,
"height":768}
,
"s26.b":{"url":"images-1/s26.b.jpeg",
"width":1024,
"height":768}
,
"s27.background":{"url":"images-1/s27.background.jpeg",
"width":1024,
"height":768}
,
"s5.b":{"url":"images-1/s5.b.jpeg",
"width":1024,
"height":768}
,
"s11.a":{"url":"images-1/s10.b.jpeg",
"width":1024,
"height":768}
,
"s14.a":{"url":"images-1/s13.b.jpeg",
"width":1024,
"height":768}
,
"s21.a":{"url":"images-1/s20.b.jpeg",
"width":1024,
"height":768}
,
"s17.a":{"url":"images-1/s16.b.jpeg",
"width":1024,
"height":768}
,
"s1.a":{"url":"images-1/s1.a.jpeg",
"width":1024,
"height":768}
,
"s24.a":{"url":"images-1/s23.b.jpeg",
"width":1024,
"height":768}
,
"s27.a":{"url":"images-1/s27.a.jpeg",
"width":1024,
"height":768}
,
"s6.a":{"url":"images-1/s5.b.jpeg",
"width":1024,
"height":768}
}
,
"slideWidth":1024,
"minorVersion":4,
"timestamp":"2012-11-06 14:11:45",
"title":"TalkPyOpenCL",
"eventTimelines":[{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s1.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s1.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s1.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s1.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s1.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s1.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":295,
"width":805,
"x":66,
"height":87}
,
"text":"Introduction to pyOpenCL"}
,{"targetRectangle":{"y":387,
"width":845,
"x":66,
"height":63}
,
"text":"Massimo Di Pierro (DePaul University, Chicago)"}
,{"targetRectangle":{"y":383,
"width":0,
"x":62,
"height":0}
,
"text":""}
,{"targetRectangle":{"y":383,
"width":0,
"x":62,
"height":0}
,
"text":""}
,{"targetRectangle":{"y":576,
"width":781,
"x":66,
"height":56}
,
"text":"Thanks to Andreas Klöckner (author of pyOpenCL)"}
,{"targetRectangle":{"y":632,
"width":593,
"x":66,
"height":56}
,
"text":"NVIDIA (for making GPUs mainstream)"}
,{"targetRectangle":{"y":688,
"width":738,
"x":66,
"height":44}
,
"text":"Khronos Compute Working Group (for OpenCL)"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s2.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s2.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s2.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s2.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s2.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s2.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":395,
"x":66,
"height":87}
,
"text":"Moore’s Law"}
]
}
,{"automaticPlay":false,
"hyperlinks":[{"url":"http://en.wikipedia.org/wiki/Opteron",
"targetRectangle":{"y":186.5,
"width":85,
"x":653.0605,
"height":29}
}
,{"url":"http://en.wikipedia.org/wiki/AMD",
"targetRectangle":{"y":186.5,
"width":52,
"x":595.0605,
"height":29}
}
]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s3.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s3.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s3.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s3.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s3.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s3.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":293,
"x":66,
"height":87}
,
"text":"Cray XK7"}
,{"targetRectangle":{"y":80.5,
"width":386,
"x":564.0605,
"height":167}
,
"text":"20 petaFlops\n18,688 nodes x\nAMD Opteron 6274 CPUs and \nNvidia Telsa K20 GPU"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s4.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s4.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s4.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s4.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s4.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s4.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":649,
"x":66,
"height":87}
,
"text":"Nvidia Fermi (GF100)"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s5.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s5.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s5.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s5.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s5.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s5.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":653,
"x":66,
"height":87}
,
"text":"Relative Benchmarks"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s6.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s6.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s6.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s6.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s6.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s6.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":847,
"x":66,
"height":87}
,
"text":"Heterogenous Systems Era"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s7.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s7.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s7.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s7.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s7.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s7.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":622,
"x":66,
"height":87}
,
"text":"Programming GPUs"}
,{"targetRectangle":{"y":300,
"width":814,
"x":98,
"height":112}
,
"text":"CUDA: Compute Unified Device Architecture) is a parallel computing architecture developed by NVIDIA"}
,{"targetRectangle":{"y":412,
"width":835,
"x":98,
"height":176}
,
"text":"OpenCL: open, royalty-free standard for cross-platform, parallel programming of modern processors found in personal computers, servers and handheld/embedded devices"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s8.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s8.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s8.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s8.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s8.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s8.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":721,
"x":66,
"height":87}
,
"text":"CUDA vs OpenCL (pro)"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s9.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s9.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s9.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s9.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s9.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s9.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":563,
"x":66,
"height":87}
,
"text":"CUDA vs OpenCL"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s10.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s10.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s10.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s10.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s10.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s10.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":834,
"x":66,
"height":87}
,
"text":"The C programming model"}
,{"targetRectangle":{"y":202.5,
"width":719,
"x":64.06049,
"height":223}
,
"text":"define a[], b[]\nload data into a\nfor(i=0; i<N; i++)\n   b[i] = do_something(i,b[i])\noutput b[]"}
,{"targetRectangle":{"y":445,
"width":822,
"x":110,
"height":267}
,
"text":"if so_something(i) can be executed in arbitrary order, then the calls can be executed in parallel, for example different threads."}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s11.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s11.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s11.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s11.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s11.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s11.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":609,
"x":66,
"height":87}
,
"text":"The OpenCL model"}
,{"targetRectangle":{"y":196,
"width":776,
"x":66,
"height":309}
,
"text":"define a[], b[]\nload data into a\ninitialize Device\ncopy a into Device memory\nrun “do_something” i,a,b on Device\ncopy b from Device memory\noutput b[]"}
,{"targetRectangle":{"y":536,
"width":822,
"x":111,
"height":184}
,
"text":"One task for each i created and queued and executed on the available processing units (cores)\n“do_something” is called a Kernel and must be written in C"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s12.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s12.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s12.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s12.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s12.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s12.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":683,
"x":66,
"height":87}
,
"text":"The pyOpenCL model"}
,{"targetRectangle":{"y":263,
"width":761.4208,
"x":131.3501,
"height":58}
,
"text":"Python + NumPy + OpenCL = pyOpenCL"}
,{"targetRectangle":{"y":416,
"width":811,
"x":106,
"height":262}
,
"text":"Code in Python + NumPy\nRun computing intensive parts as OpenCL\nEmbed Kernels in C as strings\nUse JIT to compile kernels to Device\n"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s13.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s13.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s13.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s13.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s13.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s13.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":30,
"width":417,
"x":66,
"height":87}
,
"text":"example0.py "}
,{"targetRectangle":{"y":117,
"width":494,
"x":66,
"height":87}
,
"text":"(adding vectors)"}
,{"targetRectangle":{"y":264,
"width":756,
"x":134,
"height":358}
,
"text":"import numpy\r\rn = 50000\ra = numpy.random.rand(n).astype(numpy.float32)\rb = numpy.random.rand(n).astype(numpy.float32)\rc = numpy.zeros(n,dtype=numpy.float32)\r\rfor gid in range(0, n):\r    c[gid] = a[gid] + b[gid];\r\rprint numpy.linalg.norm(c - (a + b))"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s14.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s14.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s14.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s14.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s14.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s14.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":858,
"x":66,
"height":87}
,
"text":"example1.py (with OpenCL)"}
,{"targetRectangle":{"y":246,
"width":938,
"x":43,
"height":422}
,
"text":"from device import Device\rimport numpy\r\rn = 50000\ra = numpy.random.rand(n).astype(numpy.float32)\rb = numpy.random.rand(n).astype(numpy.float32)\r\rdevice = Device()\ra_buffer = device.buffer(source=a)\rb_buffer = device.buffer(source=b)\rc_buffer = device.buffer(size=b.nbytes)\r\r..."}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s15.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s15.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s15.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s15.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s15.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s15.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":818,
"x":66,
"height":87}
,
"text":"example1.py (...continued)"}
,{"targetRectangle":{"y":230,
"width":938,
"x":43,
"height":454}
,
"text":"...\r\rprogram = device.compile(\"\"\"                                                     \r    __kernel void sum(__global const float *a, /* a_buffer  */                   \r                      __global const float *b, /* b_buffer  */                   \r                      __global float *c) {     /* c_buffer  */                   \r      int gid = get_global_id(0);              /* thread id */                   \r      c[gid] = a[gid] + b[gid];                                                  \r    }                                                                            \r    \"\"\")\r\rprogram.sum(device.queue,[n],None,a_buffer,b_buffer,c_buffer)\rc = device.retrieve(c_buffer)\rprint numpy.linalg.norm(c - (a+b))"}
,{"targetRectangle":{"y":360.0104,
"width":125.3265,
"x":546.8445,
"height":226.8912}
,
"text":""}
,{"targetRectangle":{"y":400.7254,
"width":12.75647,
"x":672,
"height":186.1658}
,
"text":""}
,{"targetRectangle":{"y":430.6062,
"width":191.3368,
"x":610.3471,
"height":153.9897}
,
"text":""}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s16.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s16.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s16.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s16.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s16.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s16.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":892,
"x":66,
"height":87}
,
"text":"device.py (device interaction)"}
,{"targetRectangle":{"y":211,
"width":938,
"x":43,
"height":492}
,
"text":"import pyopencl\rimport numpy\r\rclass Device(object):\r    flags = pyopencl.mem_flags\r    def __init__(self):\r        self.ctx = pyopencl.create_some_context()\r        self.queue = pyopencl.CommandQueue(self.ctx)\r    def buffer(self,source=None,size=0,mode= pyopencl.mem_flags.READ_WRITE):\r        if source is not None: mode = mode | pyopencl.mem_flags.COPY_HOST_PTR\r        buffer = pyopencl.Buffer(self.ctx, mode, size=size, hostbuf=source)\r        return buffer\r    def retrieve(self,buffer,shape=None,dtype=numpy.float32):\r        output = numpy.zeros(shape or buffer.size/4,dtype=dtype)\r        pyopencl.enqueue_copy(self.queue, output, buffer)\r        return output\r    def compile(self,kernel):\r        return pyopencl.Program(self.ctx,kernel).build()"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s17.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s17.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s17.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":892,
"x":66,
"height":87}
,
"text":"device.py (device interaction)"}
,{"targetRectangle":{"y":211,
"width":938,
"x":43,
"height":492}
,
"text":"import pyopencl\rimport numpy\r\rclass Device(object):\r    flags = pyopencl.mem_flags\r    def __init__(self):\r        self.ctx = pyopencl.create_some_context()\r        self.queue = pyopencl.CommandQueue(self.ctx)\r    def buffer(self,source=None,size=0,mode= pyopencl.mem_flags.READ_WRITE):\r        if source is not None: mode = mode | pyopencl.mem_flags.COPY_HOST_PTR\r        buffer = pyopencl.Buffer(self.ctx, mode, size=size, hostbuf=source)\r        return buffer\r    def retrieve(self,buffer,shape=None,dtype=numpy.float32):\r        output = numpy.zeros(shape or buffer.size/4,dtype=dtype)\r        pyopencl.enqueue_copy(self.queue, output, buffer)\r        return output\r    def compile(self,kernel):\r        return pyopencl.Program(self.ctx,kernel).build()"}
,{"targetRectangle":{"y":400,
"width":295,
"x":319,
"height":40}
,
"text":""}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s18.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s18.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s18.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s18.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s18.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s18.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":892,
"x":66,
"height":87}
,
"text":"device.py (device interaction)"}
,{"targetRectangle":{"y":211,
"width":938,
"x":43,
"height":492}
,
"text":"import pyopencl\rimport numpy\r\rclass Device(object):\r    flags = pyopencl.mem_flags\r    def __init__(self):\r        self.ctx = pyopencl.create_some_context()\r        self.queue = pyopencl.CommandQueue(self.ctx)\r    def buffer(self,source=None,size=0,mode= pyopencl.mem_flags.READ_WRITE):\r        if source is not None: mode = mode | pyopencl.mem_flags.COPY_HOST_PTR\r        buffer = pyopencl.Buffer(self.ctx, mode, size=size, hostbuf=source)\r        return buffer\r    def retrieve(self,buffer,shape=None,dtype=numpy.float32):\r        output = numpy.zeros(shape or buffer.size/4,dtype=dtype)\r        pyopencl.enqueue_copy(self.queue, output, buffer)\r        return output\r    def compile(self,kernel):\r        return pyopencl.Program(self.ctx,kernel).build()"}
,{"targetRectangle":{"y":437,
"width":295,
"x":335,
"height":40}
,
"text":""}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s19.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s19.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s19.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s19.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s19.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s19.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":892,
"x":66,
"height":87}
,
"text":"device.py (device interaction)"}
,{"targetRectangle":{"y":211,
"width":938,
"x":43,
"height":492}
,
"text":"import pyopencl\rimport numpy\r\rclass Device(object):\r    flags = pyopencl.mem_flags\r    def __init__(self):\r        self.ctx = pyopencl.create_some_context()\r        self.queue = pyopencl.CommandQueue(self.ctx)\r    def buffer(self,source=None,size=0,mode= pyopencl.mem_flags.READ_WRITE):\r        if source is not None: mode = mode | pyopencl.mem_flags.COPY_HOST_PTR\r        buffer = pyopencl.Buffer(self.ctx, mode, size=size, hostbuf=source)\r        return buffer\r    def retrieve(self,buffer,shape=None,dtype=numpy.float32):\r        output = numpy.zeros(shape or buffer.size/4,dtype=dtype)\r        pyopencl.enqueue_copy(self.queue, output, buffer)\r        return output\r    def compile(self,kernel):\r        return pyopencl.Program(self.ctx,kernel).build()"}
,{"targetRectangle":{"y":477,
"width":-295,
"x":551,
"height":-48}
,
"text":""}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s20.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s20.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s20.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s20.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s20.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s20.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":892,
"x":66,
"height":87}
,
"text":"device.py (device interaction)"}
,{"targetRectangle":{"y":211,
"width":938,
"x":43,
"height":492}
,
"text":"import pyopencl\rimport numpy\r\rclass Device(object):\r    flags = pyopencl.mem_flags\r    def __init__(self):\r        self.ctx = pyopencl.create_some_context()\r        self.queue = pyopencl.CommandQueue(self.ctx)\r    def buffer(self,source=None,size=0,mode= pyopencl.mem_flags.READ_WRITE):\r        if source is not None: mode = mode | pyopencl.mem_flags.COPY_HOST_PTR\r        buffer = pyopencl.Buffer(self.ctx, mode, size=size, hostbuf=source)\r        return buffer\r    def retrieve(self,buffer,shape=None,dtype=numpy.float32):\r        output = numpy.zeros(shape or buffer.size/4,dtype=dtype)\r        pyopencl.enqueue_copy(self.queue, output, buffer)\r        return output\r    def compile(self,kernel):\r        return pyopencl.Program(self.ctx,kernel).build()"}
,{"targetRectangle":{"y":598,
"width":-295,
"x":483,
"height":-64.99998}
,
"text":""}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s21.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s21.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s21.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s21.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s21.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s21.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":892,
"x":66,
"height":87}
,
"text":"device.py (device interaction)"}
,{"targetRectangle":{"y":211,
"width":938,
"x":43,
"height":492}
,
"text":"import pyopencl\rimport numpy\r\rclass Device(object):\r    flags = pyopencl.mem_flags\r    def __init__(self):\r        self.ctx = pyopencl.create_some_context()\r        self.queue = pyopencl.CommandQueue(self.ctx)\r    def buffer(self,source=None,size=0,mode= pyopencl.mem_flags.READ_WRITE):\r        if source is not None: mode = mode | pyopencl.mem_flags.COPY_HOST_PTR\r        buffer = pyopencl.Buffer(self.ctx, mode, size=size, hostbuf=source)\r        return buffer\r    def retrieve(self,buffer,shape=None,dtype=numpy.float32):\r        output = numpy.zeros(shape or buffer.size/4,dtype=dtype)\r        pyopencl.enqueue_copy(self.queue, output, buffer)\r        return output\r    def compile(self,kernel):\r        return pyopencl.Program(self.ctx,kernel).build()"}
,{"targetRectangle":{"y":673,
"width":-295,
"x":527,
"height":-39.99997}
,
"text":""}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s22.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s22.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s22.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s22.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s22.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s22.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":778,
"x":66,
"height":87}
,
"text":"Solving a 2D Laplace Eq."}
,{"targetRectangle":{"y":225,
"width":331,
"x":43.06047,
"height":36}
,
"text":"Input: distribution of charge (q)"}
,{"targetRectangle":{"y":225,
"width":348,
"x":608,
"height":36}
,
"text":"Output: electrostatic potential (u)"}
,{"targetRectangle":{"y":374,
"width":167,
"x":411,
"height":111}
,
"text":""}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s23.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s23.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s23.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s23.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s23.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s23.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":778,
"x":66,
"height":87}
,
"text":"Solving a 2D Laplace Eq."}
,{"targetRectangle":{"y":175,
"width":167,
"x":66,
"height":70}
,
"text":""}
,{"targetRectangle":{"y":267,
"width":741,
"x":66,
"height":175}
,
"text":""}
,{"targetRectangle":{"y":465,
"width":751,
"x":66,
"height":66}
,
"text":""}
,{"targetRectangle":{"y":548,
"width":891,
"x":66,
"height":60}
,
"text":""}
,{"targetRectangle":{"y":178.1606,
"width":0.7409058,
"x":766.2953,
"height":175.0363}
,
"text":""}
,{"targetRectangle":{"y":178,
"width":0.7409058,
"x":810,
"height":175.0363}
,
"text":""}
,{"targetRectangle":{"y":178,
"width":0.7409058,
"x":854,
"height":175.0363}
,
"text":""}
,{"targetRectangle":{"y":178,
"width":0.7409058,
"x":898,
"height":175.0363}
,
"text":""}
,{"targetRectangle":{"y":178,
"width":0.7409058,
"x":940,
"height":175.0363}
,
"text":""}
,{"targetRectangle":{"y":253.0654,
"width":212.1917,
"x":744.3005,
"height":1.571899}
,
"text":""}
,{"targetRectangle":{"y":300,
"width":212.1917,
"x":747,
"height":1.571899}
,
"text":""}
,{"targetRectangle":{"y":341,
"width":212.1917,
"x":749,
"height":1.571899}
,
"text":""}
,{"targetRectangle":{"y":209,
"width":212.1917,
"x":744,
"height":1.571899}
,
"text":""}
,{"targetRectangle":{"y":107,
"width":100,
"x":862,
"height":100}
,
"text":""}
,{"targetRectangle":{"y":256,
"width":100,
"x":901,
"height":100}
,
"text":""}
,{"targetRectangle":{"y":301,
"width":100,
"x":749,
"height":100}
,
"text":""}
,{"targetRectangle":{"y":150,
"width":100,
"x":695,
"height":100}
,
"text":""}
,{"targetRectangle":{"y":244,
"width":21,
"x":889,
"height":19}
,
"text":""}
,{"targetRectangle":{"y":241,
"width":21,
"x":799,
"height":19}
,
"text":""}
,{"targetRectangle":{"y":200,
"width":21,
"x":844,
"height":19}
,
"text":""}
,{"targetRectangle":{"y":288,
"width":21,
"x":844,
"height":19}
,
"text":""}
,{"targetRectangle":{"y":628,
"width":891,
"x":66,
"height":102}
,
"text":""}
,{"targetRectangle":{"y":646,
"width":741.1191,
"x":79,
"height":60}
,
"text":"w[site] = 1.0/4.0*(u[up]+u[down]+u[left]+u[right] - q[site]);\nu[site] = w[site]"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s24.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s24.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s24.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":694,
"x":66,
"height":87}
,
"text":"example2.py (Laplace)"}
,{"targetRectangle":{"y":184,
"width":938,
"x":43,
"height":546}
,
"text":"from device import Device\rfrom canvas import Canvas\rimport random\rimport numpy\r\r\rn = 300\rq = numpy.zeros((n,n), dtype=numpy.float32)\ru = numpy.zeros((n,n), dtype=numpy.float32)\rw = numpy.zeros((n,n), dtype=numpy.float32)\r\rfor k in range(n):\r    q[random.randint(1, n-1),random.randint(1, n-1)] = random.choice((-1,+1))\r\ndevice = Device()\rq_buffer = device.buffer(source=q, mode=device.flags.READ_ONLY)\ru_buffer = device.buffer(source=u)\rw_buffer = device.buffer(source=w)\n\r..."}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s25.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s25.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s25.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s25.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s25.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s25.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":758,
"x":66,
"height":87}
,
"text":"example2.py (continued)"}
,{"targetRectangle":{"y":211,
"width":938,
"x":43,
"height":492}
,
"text":"...\n\r\rprogram = device.compile(\"\"\"                                                     \r       __kernel void solve(__global float *w,                                    \r                           __global const float *u,                              \r                           __global const float *q) {                            \r          int x = get_global_id(0);                                              \r          int y = get_global_id(1);                                              \r          int site = y*WIDTH + x, up, down, left, right;                         \r          if(y!=0 && y!=WIDTH-1 && x!=0 && x!=WIDTH-1) {                         \r             up=site+WIDTH; down=site-WIDTH; left=site-1; right=site+1;          \r             w[site] = 1.0/4.0*(u[up]+u[down]+u[left]+u[right] - q[site]);       \r          }                                                                      \r       }                                                                         \r    \"\"\".replace('WIDTH',str(n)))\r\r..."}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s26.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s26.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s26.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s26.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s26.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s26.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":758,
"x":66,
"height":87}
,
"text":"example2.py (continued)"}
,{"targetRectangle":{"y":332.5,
"width":938,
"x":43,
"height":249}
,
"text":"...\n\rfor k in range(1000):                                                            \r    program.solve(device.queue, [n,n], None, w_buffer, u_buffer, q_buffer)       \r    (u_buffer, w_buffer) = (w_buffer, u_buffer)                                  \r                                                                                 \ru = device.retrieve(u_buffer,shape=(n,n))                                        \r\nCanvas().imshow(u).save()                                                        "}
,{"targetRectangle":{"y":213.5,
"width":670,
"x":299,
"height":141}
,
"text":"...                                             \r       __kernel void solve(__global float *w,                                    \r                           __global const float *u,                              \r                           __global const float *q) {\n...."}
,{"targetRectangle":{"y":263.0725,
"width":193.6736,
"x":601.0466,
"height":151.8705}
,
"text":""}
,{"targetRectangle":{"y":287.5907,
"width":158.7823,
"x":716.9948,
"height":127.5181}
,
"text":""}
,{"targetRectangle":{"y":327.6787,
"width":48.01038,
"x":840.4249,
"height":87.67361}
,
"text":""}
]
}
,{"automaticPlay":1,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s27.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,65,90]
,
"texture":"s27.1.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,192,203]
,
"texture":"movie.1",
"canvasObjectID":1,
"hidden":0}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"movieStart",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"isPlaying",
"texture":"movie.1",
"timingFunction":"linear",
"duration":0,
"to":{"scalar":1}
}
]
,
"duration":0,
"animationType":"none",
"textures":["movie.1"]
,
"beginTime":0}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":228,
"x":66,
"height":87}
,
"text":"Results"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s27.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s27.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s27.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s27.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s27.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s27.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":228,
"x":66,
"height":87}
,
"text":"Results"}
]
}
,{"automaticPlay":false,
"hyperlinks":[{"url":"http://mathema.tician.de/software/pycuda",
"targetRectangle":{"y":558,
"width":653,
"x":98,
"height":44}
}
,{"url":"https://github.com/srossross/Clyther/",
"targetRectangle":{"y":490,
"width":581,
"x":98,
"height":68}
}
,{"url":"http://documen.tician.de/pyopencl/",
"targetRectangle":{"y":422,
"width":466,
"x":98,
"height":68}
}
,{"url":"http://documen.tician.de/pyopencl/",
"targetRectangle":{"y":354,
"width":555,
"x":98,
"height":68}
}
,{"url":"http://www.khronos.org/opencl/",
"targetRectangle":{"y":286,
"width":498,
"x":98,
"height":68}
}
]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s28.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s28.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"hidden",
"texture":"s28.a",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s28.a"]
}
,{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s28.b",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.001}
]
,
"duration":0.001,
"animationType":"transition",
"beginTime":0,
"textures":["s28.b"]
}
]
,
"textRegions":[{"targetRectangle":{"y":74,
"width":330,
"x":66,
"height":87}
,
"text":"Resources"}
,{"targetRectangle":{"y":286,
"width":498,
"x":98,
"height":68}
,
"text":"http://www.khronos.org/opencl/"}
,{"targetRectangle":{"y":354,
"width":548,
"x":98,
"height":68}
,
"text":"http://documen.tician.de/pyopencl/"}
,{"targetRectangle":{"y":422,
"width":720,
"x":98,
"height":68}
,
"text":"http://wiki.tiker.net/PyOpenCL (installation info)"}
,{"targetRectangle":{"y":490,
"width":581,
"x":98,
"height":68}
,
"text":"https://github.com/srossross/Clyther/"}
,{"targetRectangle":{"y":558,
"width":653,
"x":98,
"height":44}
,
"text":"http://mathema.tician.de/software/pycuda"}
]
}
]
,
"loopSlideshow":0,
"showMode":0,
"majorVersion":0,
"notes":{}
,
"creator":"Apple Keynote 5.1.1",
"author":"",
"comment":"",
"pageCount":28,
"scalefactor480":0.3310547,
"slideCount":28}
